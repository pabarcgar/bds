
dragenRandomWaitTime := 3 * minute	help Amout of time we randomly wait if dragen card is busy
dragenRandomWaitTimeMin := 10		help Minimum amout of time we randomly wait if dragen card is busy
dragenMutexFile := "/staging/seqauto.mutex.tmp"	help Mutex file has to be 'local' for each dragen device (i.e. cannot be shared tmp directory)


# How to use this.
# Important: This should be part of the basic 'DragenPipeline' class
# 	- Before 'run': Call `waitDragen()` method
#	- After `run`: Call 

class DragenPipeline extends Pipeleine {


	void run() {
		getDragenMutex(taskId)

		# Run code here for the demux / analysis

		releaseDragenMutex()
	}

	# Return 'true' if dragen FPGA card is busy
	bool isDragenBusy(string taskId) {
		if( dragenMutexFile.exists() ) return true # If the mutex file exists, then we assume that dragen is busy
		dinfo := sys dragen_info 
		# TODO Process output, return true /false
	}

	# Run this before a dragen demux or project
	void getDragenMutex(string taskId) {
		# Check if Dragen card is used
		while( isDragenBusy(taskId) ) {
			randSecs := randInt(dragenRandomWaitTime) + dragenRandomWaitTimeMin
			log(INFO, "Dragen card busy, waiting $randSecs seconds")
			sleep(randSecs)
		}

		# Create Mutex file, write task ID so we know which task is blocking the device
		dragenMutexFile.write(taskid)
		dragenMutexFile.rmOnExit() # Make sure this file is deleted when we exit the command
	}

	# We need to call this after using the dragen command
	void releaseDragenMutex() {
		dragenMutexFile.rm()
	}

}